import { App } from './lib/app';
import { Machine } from './lib/machine';
import { Network } from './lib/network';
import { Organization } from './lib/organization';
import { Secret } from './lib/secret';
import { Volume } from './lib/volume';
import { Regions } from './lib/regions';
export declare const FLY_API_GRAPHQL = "https://api.fly.io";
export declare const FLY_API_HOSTNAME = "https://api.machines.dev";
interface GraphQLRequest<T> {
    query: string;
    variables?: Record<string, T>;
}
interface ClientConfig {
    graphqlUrl?: string;
    apiUrl?: string;
}
declare class Client {
    private graphqlUrl;
    private apiUrl;
    private apiKey;
    App: App;
    Machine: Machine;
    Regions: Regions;
    Network: Network;
    Organization: Organization;
    Secret: Secret;
    Volume: Volume;
    constructor(apiKey: string, { graphqlUrl, apiUrl }?: ClientConfig);
    getApiKey(): string;
    getApiUrl(): string;
    getGraphqlUrl(): string;
    gqlPostOrThrow<U, V>(payload: GraphQLRequest<U>): Promise<V>;
    restOrThrow<U, V>(path: string, method?: 'GET' | 'POST' | 'PUT' | 'DELETE', body?: U): Promise<V>;
}
export default Client;
//# sourceMappingURL=client.d.ts.map