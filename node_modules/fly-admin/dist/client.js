"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FLY_API_HOSTNAME = exports.FLY_API_GRAPHQL = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const app_1 = require("./lib/app");
const machine_1 = require("./lib/machine");
const network_1 = require("./lib/network");
const organization_1 = require("./lib/organization");
const secret_1 = require("./lib/secret");
const volume_1 = require("./lib/volume");
const regions_1 = require("./lib/regions");
exports.FLY_API_GRAPHQL = 'https://api.fly.io';
exports.FLY_API_HOSTNAME = 'https://api.machines.dev';
class Client {
    constructor(apiKey, { graphqlUrl, apiUrl } = {}) {
        if (!apiKey) {
            throw new Error('Fly API Key is required');
        }
        this.graphqlUrl = graphqlUrl || exports.FLY_API_GRAPHQL;
        this.apiUrl = apiUrl || exports.FLY_API_HOSTNAME;
        this.apiKey = apiKey;
        this.App = new app_1.App(this);
        this.Machine = new machine_1.Machine(this);
        this.Network = new network_1.Network(this);
        this.Regions = new regions_1.Regions(this);
        this.Organization = new organization_1.Organization(this);
        this.Secret = new secret_1.Secret(this);
        this.Volume = new volume_1.Volume(this);
    }
    getApiKey() {
        return this.apiKey;
    }
    getApiUrl() {
        return this.apiUrl;
    }
    getGraphqlUrl() {
        return this.graphqlUrl;
    }
    gqlPostOrThrow(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.apiKey;
            const resp = yield (0, cross_fetch_1.default)(`${this.graphqlUrl}/graphql`, {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });
            const text = yield resp.text();
            if (!resp.ok) {
                throw new Error(`${resp.status}: ${text}`);
            }
            const { data, errors } = JSON.parse(text);
            if (errors) {
                throw new Error(JSON.stringify(errors));
            }
            return data;
        });
    }
    restOrThrow(path, method = 'GET', body) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield (0, cross_fetch_1.default)(`${this.apiUrl}/v1/${path}`, {
                method,
                headers: {
                    Authorization: `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            });
            const text = yield resp.text();
            if (!resp.ok) {
                throw new Error(`${resp.status}: ${text}`);
            }
            return text ? JSON.parse(text) : undefined;
        });
    }
}
exports.default = Client;
