import Client from '../client';
export type ListAppRequest = string;
export interface ListAppResponse {
    total_apps: number;
    apps: {
        name: string;
        machine_count: number;
        network: string;
    }[];
}
export type GetAppRequest = string;
export declare enum AppStatus {
    deployed = "deployed",
    pending = "pending",
    suspended = "suspended"
}
export interface AppResponse {
    name: string;
    status: AppStatus;
    organization: {
        name: string;
        slug: string;
    };
    ipAddresses: IPAddress[];
}
export interface IPAddress {
    type: string;
    address: string;
}
export interface CreateAppRequest {
    org_slug: string;
    app_name: string;
    network?: string;
}
export type DeleteAppRequest = string;
export declare class App {
    private client;
    constructor(client: Client);
    listApps(org_slug: ListAppRequest): Promise<ListAppResponse>;
    getApp(app_name: GetAppRequest): Promise<AppResponse>;
    getAppDetailed(app_name: GetAppRequest): Promise<AppResponse>;
    createApp(payload: CreateAppRequest): Promise<void>;
    deleteApp(app_name: DeleteAppRequest): Promise<void>;
}
//# sourceMappingURL=app.d.ts.map