"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.AppStatus = void 0;
const getAppQuery = `query($name: String!) {
  app(name: $name) {
      name
      status
      organization {
        name
        slug
      }
      ipAddresses {
        nodes {
          type
          region
          address
        }
      }
  }
}`;
var AppStatus;
(function (AppStatus) {
    AppStatus["deployed"] = "deployed";
    AppStatus["pending"] = "pending";
    AppStatus["suspended"] = "suspended";
})(AppStatus = exports.AppStatus || (exports.AppStatus = {}));
class App {
    constructor(client) {
        this.client = client;
    }
    listApps(org_slug) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = `apps?org_slug=${org_slug}`;
            return yield this.client.restOrThrow(path);
        });
    }
    getApp(app_name) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = `apps/${app_name}`;
            return yield this.client.restOrThrow(path);
        });
    }
    getAppDetailed(app_name) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app } = yield this.client.gqlPostOrThrow({
                query: getAppQuery,
                variables: { name: app_name },
            });
            const ipAddresses = app.ipAddresses;
            return Object.assign(Object.assign({}, app), { ipAddresses: ipAddresses.nodes });
        });
    }
    createApp(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = 'apps';
            return yield this.client.restOrThrow(path, 'POST', payload);
        });
    }
    deleteApp(app_name) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = `apps/${app_name}`;
            return yield this.client.restOrThrow(path, 'DELETE');
        });
    }
}
exports.App = App;
