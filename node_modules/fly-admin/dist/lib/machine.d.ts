import Client from '../client';
import { ApiMachineConfig, ApiMachineInit, ApiMachineService, ApiMachineMount, ApiMachinePort, ApiMachineCheck, ApiMachineRestart, ApiMachineGuest, CheckStatus as ApiCheckStatus, CreateMachineRequest as ApiCreateMachineRequest, ImageRef as ApiImageRef, Machine as ApiMachine, StateEnum as ApiMachineState, SignalRequestSignalEnum as ApiMachineSignal } from './types';
export interface MachineConfig extends ApiMachineConfig {
    image: string;
    schedule?: 'hourly' | 'daily' | 'weekly' | 'monthly';
}
export type ListMachineRequest = string | {
    app_name: string;
    include_deleted?: '';
    region?: string;
};
export interface CreateMachineRequest extends ApiCreateMachineRequest {
    app_name: string;
    config: MachineConfig;
}
interface BaseEvent {
    id: string;
    type: string;
    status: string;
    source: 'flyd' | 'user';
    timestamp: number;
}
interface StartEvent extends BaseEvent {
    type: 'start';
    status: 'started' | 'starting';
}
interface LaunchEvent extends BaseEvent {
    type: 'launch';
    status: 'created';
    source: 'user';
}
interface RestartEvent extends BaseEvent {
    type: 'restart';
    status: 'starting' | 'stopping';
    source: 'flyd' | 'user';
}
interface ExitEvent extends BaseEvent {
    type: 'exit';
    status: 'stopped';
    source: 'flyd';
    request: {
        exit_event: {
            requested_stop: boolean;
            restarting: boolean;
            guest_exit_code: number;
            guest_signal: number;
            guest_error: string;
            exit_code: number;
            signal: number;
            error: string;
            oom_killed: boolean;
            exited_at: string;
        };
        restart_count: number;
    };
}
export type MachineEvent = LaunchEvent | StartEvent | RestartEvent | ExitEvent;
export declare enum MachineState {
    Created = "created",
    Starting = "starting",
    Started = "started",
    Stopping = "stopping",
    Stopped = "stopped",
    Replacing = "replacing",
    Destroying = "destroying",
    Destroyed = "destroyed"
}
interface MachineMount extends ApiMachineMount {
    encrypted: boolean;
    path: string;
    size_gb: number;
    volume: string;
    name: string;
}
export declare enum ConnectionHandler {
    TLS = "tls",
    PG_TLS = "pg_tls",
    HTTP = "http",
    PROXY_PROTO = "proxy_proto"
}
interface MachinePort extends ApiMachinePort {
    port: number;
    handlers?: ConnectionHandler[];
}
interface MachineService extends ApiMachineService {
    protocol: 'tcp' | 'udp';
    internal_port: number;
    ports: MachinePort[];
    concurrency?: {
        type: 'connections' | 'requests';
        soft_limit: number;
        hard_limit: number;
    };
}
interface MachineCheck extends ApiMachineCheck {
    type: 'tcp' | 'http';
    port: number;
    interval: string;
    timeout: string;
}
interface MachineGuest extends ApiMachineGuest {
    cpu_kind: 'shared' | 'performance';
    cpus: number;
    memory_mb: number;
}
interface CheckStatus extends ApiCheckStatus {
    name: string;
    status: 'passing' | 'warning' | 'critical';
    output: string;
    updated_at: string;
}
interface MachineImageRef extends Omit<ApiImageRef, 'labels'> {
    registry: string;
    repository: string;
    tag: string;
    digest: string;
    labels: Record<string, string> | null;
}
export interface MachineResponse extends Omit<ApiMachine, 'image_ref'> {
    id: string;
    name: string;
    state: MachineState;
    region: string;
    instance_id: string;
    private_ip: string;
    config: {
        env: Record<string, string>;
        init: ApiMachineInit;
        mounts: MachineMount[];
        services: MachineService[];
        checks: Record<string, MachineCheck>;
        restart: ApiMachineRestart;
        guest: MachineGuest;
        size: 'shared-cpu-1x' | 'shared-cpu-2x' | 'shared-cpu-4x';
    } & MachineConfig;
    image_ref: MachineImageRef;
    created_at: string;
    updated_at: string;
    events: MachineEvent[];
    checks: CheckStatus[];
}
export interface GetMachineRequest {
    app_name: string;
    machine_id: string;
}
interface OkResponse {
    ok: boolean;
}
export interface DeleteMachineRequest extends GetMachineRequest {
    force?: boolean;
}
export interface RestartMachineRequest extends GetMachineRequest {
    timeout?: string;
}
export interface SignalMachineRequest extends GetMachineRequest {
    signal: ApiMachineSignal;
}
export interface StopMachineRequest extends RestartMachineRequest {
    signal?: ApiMachineSignal;
}
export type StartMachineRequest = GetMachineRequest;
export interface UpdateMachineRequest extends GetMachineRequest {
    config: MachineConfig;
}
export type ListEventsRequest = GetMachineRequest;
export type ListVersionsRequest = GetMachineRequest;
export interface ListProcessesRequest extends GetMachineRequest {
    sort_by?: string;
    order?: string;
}
export interface ProcessResponse {
    command: string;
    cpu: number;
    directory: string;
    listen_sockets: [
        {
            address: string;
            proto: string;
        }
    ];
    pid: number;
    rss: number;
    rtime: number;
    stime: number;
}
export interface WaitMachineRequest extends GetMachineRequest {
    instance_id?: string;
    timeout?: string;
    state?: ApiMachineState;
}
export interface WaitMachineStopRequest extends WaitMachineRequest {
    instance_id: string;
    state?: ApiMachineState.Stopped;
}
export interface MachineVersionResponse {
    user_config: MachineResponse;
    version: string;
}
export type GetLeaseRequest = GetMachineRequest;
export interface LeaseResponse {
    status: 'success';
    data: {
        description: string;
        expires_at: number;
        nonce: string;
        owner: string;
    };
}
export interface AcquireLeaseRequest extends GetLeaseRequest {
    description?: string;
    ttl: number;
}
export interface DeleteLeaseRequest extends GetLeaseRequest {
    nonce: string;
}
export type CordonMachineRequest = GetMachineRequest;
export type UncordonMachineRequest = GetMachineRequest;
export declare class Machine {
    private client;
    constructor(client: Client);
    listMachines(app_name: ListMachineRequest): Promise<MachineResponse[]>;
    getMachine(payload: GetMachineRequest): Promise<MachineResponse>;
    createMachine(payload: CreateMachineRequest): Promise<MachineResponse>;
    updateMachine(payload: UpdateMachineRequest): Promise<MachineResponse>;
    deleteMachine(payload: DeleteMachineRequest): Promise<OkResponse>;
    startMachine(payload: StartMachineRequest): Promise<OkResponse>;
    stopMachine(payload: StopMachineRequest): Promise<OkResponse>;
    restartMachine(payload: RestartMachineRequest): Promise<OkResponse>;
    signalMachine(payload: SignalMachineRequest): Promise<OkResponse>;
    listEvents(payload: ListEventsRequest): Promise<MachineResponse['events']>;
    listVersions(payload: ListVersionsRequest): Promise<MachineVersionResponse[]>;
    listProcesses(payload: ListProcessesRequest): Promise<ProcessResponse>;
    waitMachine(payload: WaitMachineRequest): Promise<OkResponse>;
    getLease(payload: GetLeaseRequest): Promise<LeaseResponse>;
    acquireLease(payload: AcquireLeaseRequest): Promise<LeaseResponse>;
    cordonMachine(payload: CordonMachineRequest): Promise<OkResponse>;
    uncordonMachine(payload: UncordonMachineRequest): Promise<OkResponse>;
}
export {};
//# sourceMappingURL=machine.d.ts.map