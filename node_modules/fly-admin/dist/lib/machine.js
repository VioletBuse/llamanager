"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Machine = exports.ConnectionHandler = exports.MachineState = void 0;
const types_1 = require("./types");
var MachineState;
(function (MachineState) {
    MachineState["Created"] = "created";
    MachineState["Starting"] = "starting";
    MachineState["Started"] = "started";
    MachineState["Stopping"] = "stopping";
    MachineState["Stopped"] = "stopped";
    MachineState["Replacing"] = "replacing";
    MachineState["Destroying"] = "destroying";
    MachineState["Destroyed"] = "destroyed";
})(MachineState = exports.MachineState || (exports.MachineState = {}));
var ConnectionHandler;
(function (ConnectionHandler) {
    // Convert TLS connection to unencrypted TCP
    ConnectionHandler["TLS"] = "tls";
    // Handle TLS for PostgreSQL connections
    ConnectionHandler["PG_TLS"] = "pg_tls";
    // Convert TCP connection to HTTP
    ConnectionHandler["HTTP"] = "http";
    // Wrap TCP connection in PROXY protocol
    ConnectionHandler["PROXY_PROTO"] = "proxy_proto";
})(ConnectionHandler = exports.ConnectionHandler || (exports.ConnectionHandler = {}));
class Machine {
    constructor(client) {
        this.client = client;
    }
    listMachines(app_name) {
        return __awaiter(this, void 0, void 0, function* () {
            let path;
            if (typeof app_name === 'string') {
                path = `apps/${app_name}/machines`;
            }
            else {
                const { app_name: appId } = app_name, params = __rest(app_name, ["app_name"]);
                path = `apps/${appId}/machines`;
                const query = new URLSearchParams(params).toString();
                if (query)
                    path += `?${query}`;
            }
            return yield this.client.restOrThrow(path);
        });
    }
    getMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload;
            const path = `apps/${app_name}/machines/${machine_id}`;
            return yield this.client.restOrThrow(path);
        });
    }
    createMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name } = payload, body = __rest(payload, ["app_name"]);
            const path = `apps/${app_name}/machines`;
            return yield this.client.restOrThrow(path, 'POST', body);
        });
    }
    updateMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload, body = __rest(payload, ["app_name", "machine_id"]);
            const path = `apps/${app_name}/machines/${machine_id}`;
            return yield this.client.restOrThrow(path, 'POST', body);
        });
    }
    deleteMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id, force } = payload;
            const query = force ? '?kill=true' : '';
            const path = `apps/${app_name}/machines/${machine_id}${query}`;
            return yield this.client.restOrThrow(path, 'DELETE');
        });
    }
    startMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload;
            const path = `apps/${app_name}/machines/${machine_id}/start`;
            return yield this.client.restOrThrow(path, 'POST');
        });
    }
    stopMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload, body = __rest(payload, ["app_name", "machine_id"]);
            const path = `apps/${app_name}/machines/${machine_id}/stop`;
            return yield this.client.restOrThrow(path, 'POST', Object.assign({ signal: types_1.SignalRequestSignalEnum.SIGTERM }, body));
        });
    }
    restartMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload, body = __rest(payload, ["app_name", "machine_id"]);
            const path = `apps/${app_name}/machines/${machine_id}/restart`;
            return yield this.client.restOrThrow(path, 'POST', body);
        });
    }
    signalMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload, body = __rest(payload, ["app_name", "machine_id"]);
            const path = `apps/${app_name}/machines/${machine_id}/signal`;
            return yield this.client.restOrThrow(path, 'POST', body);
        });
    }
    listEvents(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload;
            const path = `apps/${app_name}/machines/${machine_id}/events`;
            return yield this.client.restOrThrow(path);
        });
    }
    listVersions(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload;
            const path = `apps/${app_name}/machines/${machine_id}/versions`;
            return yield this.client.restOrThrow(path);
        });
    }
    listProcesses(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload, params = __rest(payload, ["app_name", "machine_id"]);
            let path = `apps/${app_name}/machines/${machine_id}/ps`;
            const query = new URLSearchParams(params).toString();
            if (query)
                path += `?${query}`;
            return yield this.client.restOrThrow(path);
        });
    }
    waitMachine(payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload, params = __rest(payload, ["app_name", "machine_id"]);
            let path = `apps/${app_name}/machines/${machine_id}/wait`;
            if ((_a = params.timeout) === null || _a === void 0 ? void 0 : _a.endsWith('s'))
                params.timeout = params.timeout.slice(0, -1);
            const query = new URLSearchParams(params).toString();
            if (query)
                path += `?${query}`;
            return yield this.client.restOrThrow(path);
        });
    }
    getLease(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload;
            const path = `apps/${app_name}/machines/${machine_id}/lease`;
            return yield this.client.restOrThrow(path);
        });
    }
    acquireLease(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload, body = __rest(payload, ["app_name", "machine_id"]);
            const path = `apps/${app_name}/machines/${machine_id}/lease`;
            return yield this.client.restOrThrow(path, 'POST', body);
        });
    }
    cordonMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload;
            const path = `apps/${app_name}/machines/${machine_id}/cordon`;
            return yield this.client.restOrThrow(path, 'POST');
        });
    }
    uncordonMachine(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { app_name, machine_id } = payload;
            const path = `apps/${app_name}/machines/${machine_id}/uncordon`;
            return yield this.client.restOrThrow(path, 'POST');
        });
    }
}
exports.Machine = Machine;
