"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = exports.AddressType = void 0;
var AddressType;
(function (AddressType) {
    AddressType["v4"] = "v4";
    AddressType["v6"] = "v6";
    AddressType["private_v6"] = "private_v6";
    AddressType["shared_v4"] = "shared_v4";
})(AddressType = exports.AddressType || (exports.AddressType = {}));
const allocateIpAddressQuery = `mutation($input: AllocateIPAddressInput!) {
  allocateIpAddress(input: $input) {
    ipAddress {
      id
      address
      type
      region
      createdAt
    }
  }
}`;
const releaseIpAddressQuery = `mutation($input: ReleaseIPAddressInput!) {
  releaseIpAddress(input: $input) {
    app {
      name
    }
  }
}`;
class Network {
    constructor(client) {
        this.client = client;
    }
    // Ref: https://github.com/superfly/flyctl/blob/master/api/resource_ip_addresses.go#L79
    allocateIpAddress(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.gqlPostOrThrow({
                query: allocateIpAddressQuery,
                variables: { input },
            });
        });
    }
    releaseIpAddress(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.gqlPostOrThrow({
                query: releaseIpAddressQuery,
                variables: { input },
            });
        });
    }
}
exports.Network = Network;
