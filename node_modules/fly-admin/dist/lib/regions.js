"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Regions = void 0;
// Ref: https://github.com/superfly/flyctl/blob/master/api/resource_platform.go
const getRegionsQuery = `query {
  platform {
    requestRegion
    regions {
      name
      code
      latitude
      longitude
      gatewayAvailable
      requiresPaidPlan
    }
  }
}`;
class Regions {
    constructor(client) {
        this.client = client;
    }
    getRegions() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.gqlPostOrThrow({
                query: getRegionsQuery,
                variables: {},
            });
        });
    }
}
exports.Regions = Regions;
