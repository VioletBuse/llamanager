import Client from '../client';
import { CreateVolumeRequest as ApiCreateVolumeRequest } from './types';
export type ListVolumesRequest = string;
export interface CreateVolumeRequest extends ApiCreateVolumeRequest {
    app_name: string;
    name: string;
    region: string;
}
export interface VolumeResponse {
    id: string;
    name: string;
    state: string;
    size_gb: number;
    region: string;
    zone: string;
    encrypted: boolean;
    attached_machine_id: string | null;
    attached_alloc_id: string | null;
    created_at: string;
    blocks: number;
    block_size: number;
    blocks_free: number;
    blocks_avail: number;
    fstype: string;
    host_dedication_key: string;
}
export interface GetVolumeRequest {
    app_name: string;
    volume_id: string;
}
export type DeleteVolumeRequest = GetVolumeRequest;
export interface ExtendVolumeRequest extends GetVolumeRequest {
    size_gb: number;
}
export interface ExtendVolumeResponse {
    needs_restart: boolean;
    volume: VolumeResponse;
}
export type ListSnapshotsRequest = GetVolumeRequest;
export interface SnapshotResponse {
    id: string;
    created_at: string;
    digest: string;
    size: number;
}
export declare class Volume {
    private client;
    constructor(client: Client);
    listVolumes(app_name: ListVolumesRequest): Promise<VolumeResponse[]>;
    getVolume(payload: GetVolumeRequest): Promise<VolumeResponse>;
    createVolume(payload: CreateVolumeRequest): Promise<VolumeResponse>;
    deleteVolume(payload: DeleteVolumeRequest): Promise<VolumeResponse>;
    extendVolume(payload: ExtendVolumeRequest): Promise<ExtendVolumeResponse>;
    listSnapshots(payload: ListSnapshotsRequest): Promise<SnapshotResponse>;
}
//# sourceMappingURL=volume.d.ts.map