import { z } from "zod";

export const textgen_schema = z.object({
  model: z
    .string()
    .describe(
      "The model to generate from, in the form of a uri. Ex: hf:<user>/<model>:<quant> or hf:<user>/<model>/<file-path>#<branch>"
    ),
  messages: z.array(
    z.union([
      z
        .object({
          role: z.union([z.literal("developer"), z.literal("system")]),
          content: z.string(),
          name: z
            .string()
            .nullish()
            .describe(
              "An optional name for the participant to differentiate between different ones"
            ),
        })
        .describe(
          "Instructions from the developer to the model as to how to work"
        ),
      z
        .object({
          role: z.literal("user"),
          content: z.string(),
          name: z
            .string()
            .nullish()
            .describe(
              "An optional name for the participant in case of multiple"
            ),
        })
        .describe("Messages sent by the end user."),
      z
        .object({
          role: z.literal("assistant"),
          content: z.string(),
          refusal: z.string().nullish(),
          name: z
            .string()
            .nullish()
            .describe(
              "An optional name for the model in case multiple are present"
            ),
          tool_calls: z
            .array(
              z.object({
                id: z.string(),
                type: z.literal("function"),
                function: z.object({
                  name: z.string(),
                  arguments: z
                    .string()
                    .describe(
                      "The arguments to call the function with, in json. The model might not generate valid json or may hallucinate parameters that are not there. Please validate before use."
                    ),
                }),
              })
            )
            .nullish()
            .describe(
              "The tool calls generated by the model such as function calls."
            ),
        })
        .describe("Messages sent by the model in response to user messages"),
        z.object({
            role: z.literal("tool"),
            content: z.union([z.string(), z.array(z.string())]).describe('The contents of the tool message.'),
            tool_call_id: z.string()
        })
    ])
  ),
});
